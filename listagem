//Este script lÃª o diagrama feito no sqlserver

USE [SSVE_1.30.0123.11]
GO

/****** Object:  UserDefinedFunction [dbo].[fnTool_ScriptDiagram_Text]    Script Date: 03/02/2023 15:11:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER FUNCTION [dbo].[fnTool_ScriptDiagram_Text]()
RETURNS 
@tblOut TABLE 
(
	-- Add the column definitions for the TABLE variable here
	diagramname		NVARCHAR(128), 
	diagram_id		INT PRIMARY KEY,
    diagram_text	VARCHAR(MAX),
    diagram_ASCII	VARCHAR(MAX)
)
AS
BEGIN
	DECLARE @name			NVARCHAR(128);
	DECLARE @diagram_id		INT;
	DECLARE @index			INT;
	DECLARE @size			INT;
	DECLARE @chunk			INT;
	DECLARE @line			VARCHAR(MAX);
	DECLARE @lineASC		VARCHAR(MAX);
	DECLARE @CurrentPos		INT;
	SELECT @CurrentPos = MIN(diagram_id) FROM dbo.sysdiagrams;

	WHILE (@CurrentPos IS NOT NULL)
	BEGIN
		-- Set start index, and chunk 'constant' value
		SET @index = 1;		-- 
		SET @chunk = 32;	-- values that work: 2, 6
							-- values that fail: 15,16, 64
		
		SELECT	@diagram_id = diagram_id,
				@size = DATALENGTH(definition),
				@name = name
		  FROM dbo.sysdiagrams 
		 WHERE diagram_id = @CurrentPos;

		-- Now with the diagram_id, do all the work

		SET @line = '';
		SET @lineASC = '';
		WHILE @index < @size
		BEGIN
			-- Output as many UPDATE statements as required to append all the diagram binary
			-- data, represented as hexadecimal strings
			SELECT  @line = @line + dbo.Tool_VarbinaryToVarchar_Text(SUBSTRING (definition, @index, @chunk),0),
					@lineASC = @lineASC + dbo.Tool_VarbinaryToVarchar_Text(SUBSTRING (definition, @index, @chunk),1)
			  FROM	dbo.sysdiagrams 
			 WHERE	diagram_id = @CurrentPos;
			 
			SET @index = @index + @chunk;
		END
		INSERT INTO @tblOut	(diagramname, diagram_id, diagram_text, diagram_ASCII)
			 VALUES			(@name,		 @diagram_id, @line,		REPLACE(@lineASC,CHAR(13),''));
		SELECT @CurrentPos = MIN(diagram_id)
		  FROM dbo.sysdiagrams
		 WHERE diagram_id > @CurrentPos;
	END
	RETURN;
END
GO


ALTER FUNCTION [dbo].[Tool_VarbinaryToVarchar_Text]
(
	@VarbinaryValue	VARBINARY(max),
	@bitASCIIOnly	BIT = 0
)
RETURNS VARCHAR(max) AS
	BEGIN
	DECLARE @NumberOfBytes 	INT

	SET @NumberOfBytes = DATALENGTH(@VarbinaryValue)
	-- PART ONE --
	IF (@NumberOfBytes > 4)
	BEGIN
		DECLARE @FirstHalfNumberOfBytes INT
		DECLARE @SecondHalfNumberOfBytes INT
		SET @FirstHalfNumberOfBytes  = @NumberOfBytes/2
		SET @SecondHalfNumberOfBytes = @NumberOfBytes - @FirstHalfNumberOfBytes
		-- Call this function recursively with the two parts of the input split in half
		RETURN dbo.Tool_VarbinaryToVarchar_Text(CAST(SUBSTRING(@VarbinaryValue, 1					        , @FirstHalfNumberOfBytes)  AS VARBINARY(max)),@bitASCIIOnly)
			 + dbo.Tool_VarbinaryToVarchar_Text(CAST(SUBSTRING(@VarbinaryValue, @FirstHalfNumberOfBytes+1 , @SecondHalfNumberOfBytes) AS VARBINARY(max)),@bitASCIIOnly)
	END
	
	IF (@NumberOfBytes = 0)
	BEGIN
		RETURN ''	-- No bytes found, therefore no 'hex string' is returned
	END
	
	-- PART TWO --
	DECLARE @HighByte 		INT
	-- @NumberOfBytes <= 4 (four or less characters/8 hex digits were input)
	--						 eg. 88887777 66665555 44443333 22221111
	-- We'll process ONLY the right-most (least-significant) Byte, which consists
	-- of eight bits

	-- 2. Carve off the rightmost eight bits/single hex digit (ie 22221111)
	--    Divide by 16 does a shift-left (now processing 2222)
	SET @HighByte = CAST(@VarbinaryValue AS INT) & 255
	IF @bitASCIIOnly = 1 AND (@HighByte < 32 OR @HighByte > 126) SET @HighByte=13;

	-- 3. Trim the byte (two hex values) from the right (least significant) input Binary
	--    in preparation for further parsing
	SET @VarbinaryValue = SUBSTRING(@VarbinaryValue, 1, (@NumberOfBytes-1))

	-- 4. Recursively call this method on the remaining Binary data, concatenating the text 
	--    'value' we just decoded as their ASCII character representation
	--    ie. we pass 88887777 66665555 44443333 back to this function, adding X to the result string
	RETURN dbo.Tool_VarbinaryToVarchar_Text(@VarbinaryValue,@bitASCIIOnly) + CHAR(@HighByte)
END

